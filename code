#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# */AIPND-revision/intropyproject-classify-pet-images/calculates_results_stats.py
#                                                                             
# PROGRAMMER:
# DATE CREATED:                                  
# REVISED DATE: 
# PURPOSE: This is a *hints* file to help guide students in creating the 
#          function calculates_results_stats that calculates statistics of the
#          results of the program run using the classifier's labels and the 
#          pet image labels. It should return the results statistics as a 
#          dictionary that's called results_stats_dic. 
#         This function inputs a results dictionary as results_dic within 
#         calculate_results_stats and returns a results statistics dictionary 
#         as results_stats_dic. This dictionary contains the results statistics 
#         (counts & percentages) from the results dictionary. 
#
##
# TODO 5: EDIT and ADD code BELOW to do the following that's stated in the 
#       comments below that start with "TODO: 5" for the calculates_results_stats 
#       function. Specifically EDIT and ADD code to define the 
#       calculates_results_stats function. 
#       Notice that this function doesn't return anything because the 
#       results_dic dictionary that is passed into the function is a mutable 
#       data type so no return is needed.
# 
def calculates_results_stats(results_dic):
    """
    Calculates statistics of the results of the program run using classifier's 
    labels and the pet image labels. It should return the results statistics as 
    a dictionary that's called results_stats_dic. This dictionary contains 
    the results statistics (counts & percentages) from the results dictionary.
    Parameters:
      results_dic - Dictionary with 'key' as image filename and 'value' as a 
                    List. Where the list will contain the following items: 
                  index 0 = pet image label (string)
                  index 1 = classifier label (string)
                  index 2 = 1/0 (int)  where 1 = match between pet image
                    and classifer labels and 0 = no match between labels
                  index 3 = 1/0 (int)  where 1 = pet image 'is-a' dog and 
                            0 = pet Image 'is-NOT-a' dog. 
                  index 4 = 1/0 (int)  where 1 = Classifier classifies image 
                            'as-a' dog and 0 = Classifier classifies image  
                            'as-NOT-a' dog.
    Returns:
         results_stats_dic - Dictionary that contains the results statistics 
                            (counts & percentages) from the results dictionary.
    """
    # Creates empty dictionary for results_stats_dic
    results_stats_dic = dict()
    # Sets all counters to initial values of zero
    results_stats_dic['n_images'] = 0
    results_stats_dic['n_dogs_img'] = 0
    results_stats_dic['n_notdogs_img'] = 0
    results_stats_dic['n_match'] = 0
    results_stats_dic['n_correct_dogs'] = 0
    results_stats_dic['n_correct_notdogs'] = 0
    results_stats_dic['n_correct_breed'] = 0 

    # process through the results dictionary
    for key in results_dic:
        # TODO: 5a. REPLACE pass with CODE that counts the total number of 
        #           images - results_stats_dic['n_images']
        #
        # counts the total number of images in results_dic
        results_stats_dic['n_images'] += 1

        # TODO: 5b. REPLACE pass with CODE that counts the number of dog images -
        #           results_stats_dic['n_dogs_img']
        #
        # counts number of dog images in results_dic
        if results_dic[key][3] == 1:
            results_stats_dic['n_dogs_img'] += 1

        # TODO: 5c. REPLACE pass with CODE that counts the number of NOT dog images -
        #           results_stats_dic['n_notdogs_img']
        #
        # counts number of not-dog images in results_dic
        if results_dic[key][3] == 0:
            results_stats_dic['n_notdogs_img'] += 1

        # TODO: 5d. REPLACE pass with CODE that counts the number of matches -
        #           results_stats_dic['n_match']
        #
        # counts number of matches in results_dic
        if results_dic[key][2] == 1:
            results_stats_dic['n_match'] += 1

        # TODO: 5e. REPLACE pass with CODE that counts the number of correctly 
        #           classified dog images - results_stats_dic['n_correct_dogs']
        #
        # counts number of correctly classified dog images in results_dic
        if results_dic[key][4] == 1 and results_dic[key][3] == 1:
            results_stats_dic['n_correct_dogs'] += 1

        # TODO: 5f. REPLACE pass with CODE that counts the number of correctly 
        #           classified NOT dog images - results_stats_dic['n_correct_notdogs']
        #
        # counts number of correctly classified not-dog images in results_dic
        if results_dic[key][4] == 0 and results_dic[key][3] == 0:
            results_stats_dic['n_correct_notdogs'] += 1

        # TODO: 5g. REPLACE pass with CODE that counts the number of correctly 
        #           classified dog breeds - results_stats_dic['n_correct_breed']
        #
        # counts number of correctly classified dog breeds in results_dic
        if results_dic[key][2] == 1 and results_dic[key][3] == 1:
            results_stats_dic['n_correct_breed'] += 1
   
    # Calculates statistics of the results of the program run using classifier's labels and the pet image labels
    # Calculates statistics of the results of the program run using classifier's labels and the pet image labels. 
    # It should return the results statistics as a dictionary that's called results_stats_dic. This dictionary 
    # contains the results statistics (counts & percentages) from the results dictionary. 
    # Parameters:
    #   results_dic - Dictionary with 'key' as image filename and 'value' as a 
    #                 List. Where the list will contain the following items: 
    #               index 0 = pet image label (string)
    #               index 1 = classifier label (string)
    #               index 2 = 1/0 (int)  where 1 = match between pet image
    #                 and classifer labels and 0 = no match between labels
    #               index 3 = 1/0 (int)  where 1 = pet image 'is-a' dog and 
    #                         0 = pet Image 'is-NOT-a' dog. 
    #               index 4 = 1/0 (int)  where 1 = Classifier classifies image 
    #                         'as-a' dog and 0 = Classifier classifies image  
    #                         'as-NOT-a' dog.
    # Returns:
    #      results_stats_dic - Dictionary that contains the results statistics 
    #                         (counts & percentages) from the results dictionary. 

    # Calculates percentages
    results_stats_dic['pct_match'] = (results_stats_dic['n_match']/results_stats_dic['n_images'])*100
    results_stats_dic['pct_correct_dogs'] = (results_stats_dic['n_correct_dogs']/results_stats_dic['n_dogs_img'])*100
    results_stats_dic['pct_correct_breed'] = (results_stats_dic['n_correct_breed']/results_stats_dic['n_dogs_img'])*100
    results_stats_dic['pct_correct_notdogs'] = (results_stats_dic['n_correct_notdogs']/results_stats_dic['n_notdogs_img'])*100
 
    # TODO: 5h. REPLACE pass with CODE to calculate percentage of correctly
    #           classified dog images - results_stats_dic['pct_correct_dogs']
    #
    # calculates the percentage of correctly classified dog images in results_dic
    results_stats_dic['pct_correct_dogs'] = (results_stats_dic['n_correct_dogs'] / results_stats_dic['n_dogs_img']) * 100 if results_stats_dic['n_dogs_img'] > 0 else 0
    
    # TODO: 5i. REPLACE pass with CODE to calculate percentage of correctly
    #           classified NOT dog images - results_stats_dic['pct_correct_notdogs']
    #
    # calculates the percentage of correctly classified not-dog images in results_dic
    results_stats_dic['pct_correct_notdogs'] = (results_stats_dic['n_correct_notdogs'] / results_stats_dic['n_notdogs_img']) * 100 if results_stats_dic['n_notdogs_img'] > 0 else 0

    # TODO: 5j. REPLACE pass with CODE to calculate percentage of correctly
    #           classified dog breeds - results_stats_dic['pct_correct_breed']
    #
    # calculates the percentage of correctly classified dog breeds in results_dic
    results_stats_dic['pct_correct_breed'] = (results_stats_dic['n_correct_breed'] / results_stats_dic['n_dogs_img']) * 100 if results_stats_dic['n_dogs_img'] > 0 else 0

    return results_stats_dic
